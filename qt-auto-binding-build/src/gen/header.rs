use qt_auto_binding_core::Object;
use std::{
    fs::File,
    io::{Result as IoResult, Write},
    path::Path,
};

fn gen_object(object: &Object) -> String {
    #[cfg_attr(rustfmt, rustfmt_skip)]
        format!(
r#"class {name}: public QObject
{{
    Q_OBJECT
public:
    explicit {name}(QObject *parent = 0);
    ~{name}();
private:
    void *m_data;
}};"#,
            name = object.name()
        )
}

fn perform_gen(file_path: &Path, objects: &[Object]) -> IoResult<()> {
    let objects = objects
        .into_iter()
        .map(gen_object)
        .collect::<Vec<_>>()
        .join("\n\n");

    #[cfg_attr(rustfmt, rustfmt_skip)]
    let content = format!(
r#"// This file has been generated by qt_binding
//
// Any modification will be discarded.

#ifndef AUTOGENERATED_BY_QTBINDING_BINDINGS_H
#define AUTOGENERATED_BY_QTBINDING_BINDINGS_H

#include <QtCore/QObject>

namespace qt_bindings {{

{}

}}

#endif // AUTOGENERATED_BY_QTBINDING_BINDINGS_H
"#,
        objects
    );

    let mut file = File::create(file_path)?;
    file.write_all(content.as_bytes())?;

    Ok(())
}

pub(crate) fn gen(file_path: &Path, objects: &[Object]) {
    perform_gen(file_path, objects).unwrap()
}
